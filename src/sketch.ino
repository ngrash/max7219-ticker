#include "LedControl.h"
#include <avr/pgmspace.h>

#define PADDING 9
#define MSG_BUFFER_LENGTH 256

const byte charsCols[] PROGMEM = {
  1, // (space)
  1, // !
  3, // "
  5, // #
  5, // $
  5, // %
  5, // &
  2, // '
  3, // (
  3, // )
  5, // *
  5, // +
  2, //
  5, // -
  2, // .
  5, // /
  5, // 0
  3, // 1
  5, // 2
  5, // 3
  5, // 4
  5, // 5
  5, // 6
  5, // 7
  5, // 8
  5, // 9
  2, // :
  2, // ;
  4, // <
  5, // =
  4, // >
  5, // ?
  5, // @
  5, // A
  5, // B
  5, // C
  5, // D
  5, // E
  5, // F
  5, // G
  5, // H
  3, // I
  5, // J
  5, // K
  5, // L
  5, // M
  5, // N
  5, // O
  5, // P
  5, // Q
  5, // R
  5, // S
  5, // T
  5, // U
  5, // V
  5, // W
  5, // X
  5, // Y
  5, // Z
  3, // [
  5, // "\"
  4, // ]
  5, // ^
  5, // _
  3, // `
  5, // a
  5, // b
  5, // c
  5, // d
  5, // e
  5, // f
  5, // g
  5, // h
  3, // i
  4, // j
  4, // k
  3, // l
  5, // m
  5, // n
  5, // o
  5, // p
  5, // q
  5, // r
  5, // s
  5, // t
  5, // u
  5, // v
  5, // w
  5, // x
  5, // y
  5, // z
  3, // {
  1, // |
  3  // }
};

const byte chars[][5] PROGMEM = {
  {0x00},                         // (space)
  {0xfa},                         // !
  {0xe0, 0x00, 0xe0},             // "
  {0x28, 0xfe, 0x28, 0xfe, 0x28}, // #
  {0x24, 0x54, 0xfe, 0x54, 0x48}, // $
  {0xc4, 0xc8, 0x10, 0x26, 0x46}, // %
  {0x6c, 0x92, 0xaa, 0x44, 0x0a}, // &
  {0xa0, 0xc0},                   // '
  {0x38, 0x44, 0x82},             // (
  {0x82, 0x44, 0x38},             // )
  {0x10, 0x54, 0x38, 0x54, 0x10}, // *
  {0x10, 0x10, 0x7c, 0x10, 0x10}, // +
  {0x0a, 0x0c},                   //
  {0x10, 0x10, 0x10, 0x10, 0x10}, // -
  {0x06, 0x06},                   // .
  {0x04, 0x08, 0x10, 0x20, 0x40}, // /
  {0x7c, 0x8a, 0x92, 0xa2, 0x7c}, // 0
  {0x42, 0xfe, 0x02},             // 1
  {0x42, 0x86, 0x8a, 0x92, 0x62}, // 2
  {0x84, 0x82, 0xa2, 0xd2, 0x8c}, // 3
  {0x18, 0x28, 0x48, 0xfe, 0x08}, // 4
  {0xe4, 0xa2, 0xa2, 0xa2, 0x9c}, // 5
  {0x3c, 0x52, 0x92, 0x92, 0x0c}, // 6
  {0x80, 0x8e, 0x90, 0xa0, 0xc0}, // 7
  {0x6c, 0x92, 0x92, 0x92, 0x6c}, // 8
  {0x60, 0x92, 0x92, 0x94, 0x78}, // 9
  {0x6c, 0x6c},                   // :
  {0x6a, 0x6c},                   // ;
  {0x10, 0x28, 0x44, 0x82},       // <
  {0x28, 0x28, 0x28, 0x28, 0x28}, // =
  {0x82, 0x44, 0x28, 0x10},       // >
  {0x40, 0x80, 0x8a, 0x90, 0x60}, // ?
  {0x4c, 0x92, 0x9e, 0x82, 0x7c}, // @
  {0x7e, 0x88, 0x88, 0x88, 0x7e}, // A
  {0xfe, 0x92, 0x92, 0x92, 0x6c}, // B
  {0x7c, 0x82, 0x82, 0x82, 0x44}, // C
  {0xfe, 0x82, 0x82, 0x44, 0x38}, // D
  {0xfe, 0x92, 0x92, 0x92, 0x82}, // E
  {0xfe, 0x90, 0x90, 0x80, 0x80}, // F
  {0x7c, 0x82, 0x82, 0x8a, 0x4c}, // G
  {0xfe, 0x10, 0x10, 0x10, 0xfe}, // H
  {0x82, 0xfe, 0x82},             // I
  {0x04, 0x02, 0x82, 0xfc, 0x80}, // J
  {0xfe, 0x10, 0x28, 0x44, 0x82}, // K
  {0xfe, 0x02, 0x02, 0x02, 0x02}, // L
  {0xfe, 0x40, 0x20, 0x40, 0xfe}, // M
  {0xfe, 0x20, 0x10, 0x08, 0xfe}, // N
  {0x7c, 0x82, 0x82, 0x82, 0x7c}, // O
  {0xfe, 0x90, 0x90, 0x90, 0x60}, // P
  {0x7c, 0x82, 0x8a, 0x84, 0x7a}, // Q
  {0xfe, 0x90, 0x98, 0x94, 0x62}, // R
  {0x62, 0x92, 0x92, 0x92, 0x8c}, // S
  {0x80, 0x80, 0xfe, 0x80, 0x80}, // T
  {0xfc, 0x02, 0x02, 0x02, 0xfc}, // U
  {0xf8, 0x04, 0x02, 0x04, 0xf8}, // V
  {0xfe, 0x04, 0x18, 0x04, 0xfe}, // W
  {0xc6, 0x28, 0x10, 0x28, 0xc6}, // X
  {0xc0, 0x20, 0x1e, 0x20, 0xc0}, // Y
  {0x86, 0x8a, 0x92, 0xa2, 0xc2}, // Z
  {0xfe, 0x82, 0x82},             // [
  {0x40, 0x20, 0x10, 0x08, 0x04}, // "\"
  {0x82, 0x82, 0xfe, 0x00},       // ]
  {0x20, 0x40, 0x80, 0x40, 0x20}, // ^
  {0x02, 0x02, 0x02, 0x02, 0x02}, // _
  {0x80, 0x40, 0x20},             // `
  {0x04, 0x2a, 0x2a, 0x2a, 0x1e}, // a
  {0xfe, 0x12, 0x22, 0x22, 0x1c}, // b
  {0x1c, 0x22, 0x22, 0x22, 0x04}, // c
  {0x1c, 0x22, 0x22, 0x12, 0xfe}, // d
  {0x1c, 0x2a, 0x2a, 0x2a, 0x18}, // e
  {0x10, 0x7e, 0x90, 0x80, 0x40}, // f
  {0x10, 0x28, 0x2a, 0x2a, 0x3c}, // g
  {0xfe, 0x10, 0x20, 0x20, 0x1e}, // h
  {0x22, 0xbe, 0x02},             // i
  {0x04, 0x02, 0x22, 0xbc},       // j
  {0xfe, 0x08, 0x14, 0x22},       // k
  {0x82, 0xfe, 0x02},             // l
  {0x3e, 0x20, 0x18, 0x20, 0x1e}, // m
  {0x3e, 0x10, 0x20, 0x20, 0x1e}, // n
  {0x1c, 0x22, 0x22, 0x22, 0x1c}, // o
  {0x3e, 0x28, 0x28, 0x28, 0x10}, // p
  {0x10, 0x28, 0x28, 0x18, 0x3e}, // q
  {0x3e, 0x10, 0x20, 0x20, 0x10}, // r
  {0x12, 0x2a, 0x2a, 0x2a, 0x04}, // s
  {0x20, 0xfc, 0x22, 0x02, 0x04}, // t
  {0x3c, 0x02, 0x02, 0x04, 0x3e}, // u
  {0x38, 0x04, 0x02, 0x04, 0x38}, // v
  {0x3c, 0x02, 0x0c, 0x02, 0x3c}, // w
  {0x22, 0x14, 0x08, 0x14, 0x22}, // x
  {0x30, 0x0a, 0x0a, 0x0a, 0x3c}, // y
  {0x22, 0x26, 0x2a, 0x32, 0x22}, // z
  {0x10, 0x6c, 0x82},             // {
  {0xfe},                         // |
  {0x82, 0x6c, 0x10},             // }
};

LedControl lc = LedControl(12, 11, 10, 1);

void setup() {
  lc.shutdown(0, false);
  lc.setIntensity(0, 1);
  lc.clearDisplay(0);

  Serial.begin(9600);
  Serial.setTimeout(1000);
}

void loop() {
  /*char msg[MSG_BUFFER_LENGTH];
  readMsg(msg, MSG_BUFFER_LENGTH);*/
  char* msg = "The quick brown fox jumps over the lazy dog.";
  scrollMessage(msg);
}

void readMsg(char* buffer, int length) {
  byte bytesRead = Serial.readBytesUntil('\0', buffer, length-1);
  buffer[bytesRead] = '\0';
}

int messageColWidth(const char* message) {
  int width = 0;
  char ch;
  for(int i = 0; (ch = message[i]) != 0; i++) {
    width += getCharWidth(ch);
    width += 1; // one blank col after each char
  }
  return width;
}

void scrollMessage(char* message) {
  int bufferSize = messageColWidth(message) + PADDING*2;
  byte* buffer = (byte*)malloc(bufferSize);
  getColumns(message, buffer);

  drawFrames(buffer, bufferSize);

  free(buffer);
}

void drawFrames(byte* buffer, int bufferSize) {
  for(int i = 0; i < bufferSize-8; i++) {
    drawFrame(i, buffer, bufferSize);
    delay(50);
  }
}

void drawFrame(int frame, byte* buffer, int bufferSize) {
  for(int i = 0; i < 8; i++) {
    byte col = buffer[frame + i];
    lc.setColumn(0, i, col);
  }
}

void getColumns(char* message, byte* buffer) {
  for(int i = 0; i < PADDING; i++) {
    buffer[i] = 0;
  }

  int colIdx = PADDING;
  while(*message) {
    char ch = *message++;
    int pos = getCharPos(ch);
    int width = getCharWidth(ch);
    for(int i = 0; i < width; i++) {
      buffer[colIdx++] = getCharCol(pos, i);
    }
    buffer[colIdx++] = '\0';
  }

  for(int i = 0; i < PADDING; i++) {
    buffer[colIdx+i] = 0;
  }
}

int getCharPos(char ch) {
  return (int)(ch - 32);
}

int getCharWidth(char ch) {
  return pgm_read_byte(charsCols + (int)(ch - 32));
}

byte getCharCol(int pos, int col) {
  return pgm_read_byte(&(chars[pos][col]));
}
